/**
* operations.h: contains all the CPU operations mapped by opcode.
* This file has been autogenerated by using `lua instructions.lua`.
*/

#ifndef GB_CPU_OPERATIONS_H
#define GB_CPU_OPERATIONS_H

#include <stdio.h>

typedef
struct operation
{
	// name is the debugging name of the operation.
	const char* name;

	// the instruction to be executed
	const int (*instruction)();

	// number of bytes the operation consumes
	const uint8_t b;

	// number of cycles the operation needs.
	// in some cases there might be more in the case of e.g. branching.
	const uint8_t cc;
}
operation;

int invalid_op () { fprintf (stderr, "$%.4X: INVALID OPERATION\n", pc); return 0; }
int __ld__B_n__ () { uint8_t n = RAM (pc ++); B = n; return 8; }
int __ld__C_n__ () { uint8_t n = RAM (pc ++); C = n; return 8; }
int __ld__D_n__ () { uint8_t n = RAM (pc ++); D = n; return 8; }
int __ld__E_n__ () { uint8_t n = RAM (pc ++); E = n; return 8; }
int __ld__H_n__ () { uint8_t n = RAM (pc ++); H = n; return 8; }
int __ld__L_n__ () { uint8_t n = RAM (pc ++); L = n; return 8; }
int __ld__A_B__ () { A = B; return 4; }
int __ld__A_C__ () { A = C; return 4; }
int __ld__A_D__ () { A = D; return 4; }
int __ld__A_E__ () { A = E; return 4; }
int __ld__A_H__ () { A = H; return 4; }
int __ld__A_L__ () { A = L; return 4; }
int __ld__A__HL___ () { A = RAM (HL); return 8; }
int __ld__B_B__ () { B = B; return 4; }
int __ld__B_C__ () { B = C; return 4; }
int __ld__B_D__ () { B = D; return 4; }
int __ld__B_E__ () { B = E; return 4; }
int __ld__B_H__ () { B = H; return 4; }
int __ld__B_L__ () { B = L; return 4; }
int __ld__B__HL___ () { B = RAM (HL); return 8; }
int __ld__C_B__ () { C = B; return 4; }
int __ld__C_C__ () { C = C; return 4; }
int __ld__C_D__ () { C = D; return 4; }
int __ld__C_E__ () { C = E; return 4; }
int __ld__C_H__ () { C = H; return 4; }
int __ld__C_L__ () { C = L; return 4; }
int __ld__C__HL___ () { C = RAM (HL); return 8; }
int __ld__D_B__ () { D = B; return 4; }
int __ld__D_C__ () { D = C; return 4; }
int __ld__D_D__ () { D = D; return 4; }
int __ld__D_E__ () { D = E; return 4; }
int __ld__D_H__ () { D = H; return 4; }
int __ld__D_L__ () { D = L; return 4; }
int __ld__D__HL___ () { D = RAM (HL); return 8; }
int __ld__E_B__ () { E = B; return 4; }
int __ld__E_C__ () { E = C; return 4; }
int __ld__E_D__ () { E = D; return 4; }
int __ld__E_E__ () { E = E; return 4; }
int __ld__E_H__ () { E = H; return 4; }
int __ld__E_L__ () { E = L; return 4; }
int __ld__E__HL___ () { E = RAM (HL); return 8; }
int __ld__H_B__ () { H = B; return 4; }
int __ld__H_C__ () { H = C; return 4; }
int __ld__H_D__ () { H = D; return 4; }
int __ld__H_E__ () { H = E; return 4; }
int __ld__H_H__ () { H = H; return 4; }
int __ld__H_L__ () { H = L; return 4; }
int __ld__H__HL___ () { H = RAM (HL); return 8; }
int __ld__L_B__ () { L = B; return 4; }
int __ld__L_C__ () { L = C; return 4; }
int __ld__L_D__ () { L = D; return 4; }
int __ld__L_E__ () { L = E; return 4; }
int __ld__L_H__ () { L = H; return 4; }
int __ld__L_L__ () { L = L; return 4; }
int __ld__L__HL___ () { L = RAM (HL); return 8; }
int __ld___HL__B__ () { STORE ((HL),B); return 8; }
int __ld___HL__C__ () { STORE ((HL),C); return 8; }
int __ld___HL__D__ () { STORE ((HL),D); return 8; }
int __ld___HL__E__ () { STORE ((HL),E); return 8; }
int __ld___HL__H__ () { STORE ((HL),H); return 8; }
int __ld___HL__L__ () { STORE ((HL),L); return 8; }
int __ld___HL__n__ () { uint8_t n = RAM (pc ++); STORE ((HL),n); return 12; }
int __ld__A__BC___ () { A = RAM (BC); return 8; }
int __ld__A__DE___ () { A = RAM (DE); return 8; }
int __ld__A__nn___ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); A = RAM (nn); return 16; }
int __ld__A_n__ () { uint8_t n = RAM (pc ++); A = n; return 8; }
int __ld__A_A__ () { A = A; return 4; }
int __ld__B_A__ () { B = A; return 4; }
int __ld__C_A__ () { C = A; return 4; }
int __ld__D_A__ () { D = A; return 4; }
int __ld__E_A__ () { E = A; return 4; }
int __ld__H_A__ () { H = A; return 4; }
int __ld__L_A__ () { L = A; return 4; }
int __ld___BC__A__ () { STORE ((BC),A); return 8; }
int __ld___DE__A__ () { STORE ((DE),A); return 8; }
int __ld___HL__A__ () { STORE ((HL),A); return 8; }
int __ld___nn__A__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); STORE ((nn),A); return 16; }
int __ld__A__C___ () { uint16_t nn = 0xFF00 | C; A = RAM (nn); return 8; }
int __ld___C__A__ () { uint16_t nn = 0xFF00 | C; STORE ((nn),A); return 8; }
int __ldd__A__HL___ () { A = RAM (HL); HL --; return 8; }
int __ldd___HL__A__ () { STORE ((HL),A); HL --; return 8; }
int __ldi__A__HL___ () { A = RAM (HL); HL ++; return 8; }
int __ldi___HL__A__ () { STORE ((HL),A); HL ++; return 8; }
int __ld___n__A__ () { uint16_t n = 0xFF00 | RAM (pc ++); STORE ((n),A); return 12; }
int __ld__A__n___ () { uint16_t n = 0xFF00 | RAM (pc ++); A = RAM (n); return 12; }
int __ld__BC_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); BC = nn; return 12; }
int __ld__DE_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); DE = nn; return 12; }
int __ld__HL_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); HL = nn; return 12; }
int __ld__SP_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); SP = nn; return 12; }
int __ld__SP_HL__ () { SP = HL; return 8; }
int __ldhl__n__ () { uint8_t n = RAM (pc ++); ldhl (n); return 12; }
int __ld___nn__SP__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); STORE ((nn),SP); STORE (nn + 1, SP >> 8); return 20; }
int __push__AF__ () { push (AF); return 16; }
int __push__BC__ () { push (BC); return 16; }
int __push__DE__ () { push (DE); return 16; }
int __push__HL__ () { push (HL); return 16; }
int __pop__AF__ () { pop (&AF); F &= 0xF0; return 12; }
int __pop__BC__ () { pop (&BC); return 12; }
int __pop__DE__ () { pop (&DE); return 12; }
int __pop__HL__ () { pop (&HL); return 12; }
int __add__A__ () { add (A); return 4; }
int __add__B__ () { add (B); return 4; }
int __add__C__ () { add (C); return 4; }
int __add__D__ () { add (D); return 4; }
int __add__E__ () { add (E); return 4; }
int __add__H__ () { add (H); return 4; }
int __add__L__ () { add (L); return 4; }
int __add___HL___ () { add (RAM (HL)); return 8; }
int __add__n__ () { uint8_t n = RAM (pc ++); add (n); return 8; }
int __adc__A__ () { adc (A); return 4; }
int __adc__B__ () { adc (B); return 4; }
int __adc__C__ () { adc (C); return 4; }
int __adc__D__ () { adc (D); return 4; }
int __adc__E__ () { adc (E); return 4; }
int __adc__H__ () { adc (H); return 4; }
int __adc__L__ () { adc (L); return 4; }
int __adc___HL___ () { adc (RAM (HL)); return 8; }
int __adc__n__ () { uint8_t n = RAM (pc ++); adc (n); return 8; }
int __sub__A__ () { sub (A); return 4; }
int __sub__B__ () { sub (B); return 4; }
int __sub__C__ () { sub (C); return 4; }
int __sub__D__ () { sub (D); return 4; }
int __sub__E__ () { sub (E); return 4; }
int __sub__H__ () { sub (H); return 4; }
int __sub__L__ () { sub (L); return 4; }
int __sub___HL___ () { sub (RAM (HL)); return 8; }
int __sub__n__ () { uint8_t n = RAM (pc ++); sub (n); return 8; }
int __sbc__A__ () { sbc (A); return 4; }
int __sbc__B__ () { sbc (B); return 4; }
int __sbc__C__ () { sbc (C); return 4; }
int __sbc__D__ () { sbc (D); return 4; }
int __sbc__E__ () { sbc (E); return 4; }
int __sbc__H__ () { sbc (H); return 4; }
int __sbc__L__ () { sbc (L); return 4; }
int __sbc___HL___ () { sbc (RAM (HL)); return 8; }
int __sbc__n__ () { uint8_t n = RAM (pc ++); sbc (n); return 8; }
int __and__A__ () { and (A); return 4; }
int __and__B__ () { and (B); return 4; }
int __and__C__ () { and (C); return 4; }
int __and__D__ () { and (D); return 4; }
int __and__E__ () { and (E); return 4; }
int __and__H__ () { and (H); return 4; }
int __and__L__ () { and (L); return 4; }
int __and___HL___ () { and (RAM (HL)); return 8; }
int __and__n__ () { uint8_t n = RAM (pc ++); and (n); return 8; }
int __or__A__ () { or (A); return 4; }
int __or__B__ () { or (B); return 4; }
int __or__C__ () { or (C); return 4; }
int __or__D__ () { or (D); return 4; }
int __or__E__ () { or (E); return 4; }
int __or__H__ () { or (H); return 4; }
int __or__L__ () { or (L); return 4; }
int __or___HL___ () { or (RAM (HL)); return 8; }
int __or__n__ () { uint8_t n = RAM (pc ++); or (n); return 8; }
int __xor__A__ () { xor (A); return 4; }
int __xor__B__ () { xor (B); return 4; }
int __xor__C__ () { xor (C); return 4; }
int __xor__D__ () { xor (D); return 4; }
int __xor__E__ () { xor (E); return 4; }
int __xor__H__ () { xor (H); return 4; }
int __xor__L__ () { xor (L); return 4; }
int __xor___HL___ () { xor (RAM (HL)); return 8; }
int __xor__n__ () { uint8_t n = RAM (pc ++); xor (n); return 8; }
int __cp__A__ () { cp (A); return 4; }
int __cp__B__ () { cp (B); return 4; }
int __cp__C__ () { cp (C); return 4; }
int __cp__D__ () { cp (D); return 4; }
int __cp__E__ () { cp (E); return 4; }
int __cp__H__ () { cp (H); return 4; }
int __cp__L__ () { cp (L); return 4; }
int __cp___HL___ () { cp (RAM (HL)); return 8; }
int __cp__n__ () { uint8_t n = RAM (pc ++); cp (n); return 8; }
int __inc__A__ () { inc (&A); return 4; }
int __inc__B__ () { inc (&B); return 4; }
int __inc__C__ () { inc (&C); return 4; }
int __inc__D__ () { inc (&D); return 4; }
int __inc__E__ () { inc (&E); return 4; }
int __inc__H__ () { inc (&H); return 4; }
int __inc__L__ () { inc (&L); return 4; }
int __inc___HL___ () { uint8_t n = RAM (HL); inc (&n); STORE (HL, n); return 12; }
int __dec__A__ () { dec (&A); return 4; }
int __dec__B__ () { dec (&B); return 4; }
int __dec__C__ () { dec (&C); return 4; }
int __dec__D__ () { dec (&D); return 4; }
int __dec__E__ () { dec (&E); return 4; }
int __dec__H__ () { dec (&H); return 4; }
int __dec__L__ () { dec (&L); return 4; }
int __dec___HL___ () { uint8_t n = RAM (HL); dec (&n); STORE (HL, n); return 12; }
int __addhl__BC__ () { addhl (BC); return 8; }
int __addhl__DE__ () { addhl (DE); return 8; }
int __addhl__HL__ () { addhl (HL); return 8; }
int __addhl__SP__ () { addhl (SP); return 8; }
int __addsp__n__ () { uint8_t n = RAM (pc ++); addsp (n); return 16; }
int __inc16__BC__ () { inc16 (&BC); return 8; }
int __inc16__DE__ () { inc16 (&DE); return 8; }
int __inc16__HL__ () { inc16 (&HL); return 8; }
int __inc16__SP__ () { inc16 (&SP); return 8; }
int __dec16__BC__ () { dec16 (&BC); return 8; }
int __dec16__DE__ () { dec16 (&DE); return 8; }
int __dec16__HL__ () { dec16 (&HL); return 8; }
int __dec16__SP__ () { dec16 (&SP); return 8; }
int __swap__A__ () { swap (&A); return 8; }
int __swap__B__ () { swap (&B); return 8; }
int __swap__C__ () { swap (&C); return 8; }
int __swap__D__ () { swap (&D); return 8; }
int __swap__E__ () { swap (&E); return 8; }
int __swap__H__ () { swap (&H); return 8; }
int __swap__L__ () { swap (&L); return 8; }
int __swap___HL___ () { uint8_t n = RAM (HL); swap (&n); STORE (HL, n); return 16; }
int __daa__ () { daa (); return 4; }
int __cpl__ () { cpl (); return 4; }
int __ccf__ () { ccf (); return 4; }
int __scf__ () { scf (); return 4; }
int __nop__ () { nop (); return 4; }
int __halt__ () { halt (); return 4; }
int __stop__ () { stop (); return 4; }
int __di__ () { di (); return 4; }
int __ei__ () { ei (); return 4; }
int __rlca__ () { rlca (); return 4; }
int __rla__ () { rla (); return 4; }
int __rrca__ () { rrca (); return 4; }
int __rra__ () { rra (); return 4; }
int __rlc__A__ () { rlc (&A); return 8; }
int __rlc__B__ () { rlc (&B); return 8; }
int __rlc__C__ () { rlc (&C); return 8; }
int __rlc__D__ () { rlc (&D); return 8; }
int __rlc__E__ () { rlc (&E); return 8; }
int __rlc__H__ () { rlc (&H); return 8; }
int __rlc__L__ () { rlc (&L); return 8; }
int __rlc___HL___ () { uint8_t n = RAM (HL); rlc (&n); STORE (HL, n); return 16; }
int __rl__A__ () { rl (&A); return 8; }
int __rl__B__ () { rl (&B); return 8; }
int __rl__C__ () { rl (&C); return 8; }
int __rl__D__ () { rl (&D); return 8; }
int __rl__E__ () { rl (&E); return 8; }
int __rl__H__ () { rl (&H); return 8; }
int __rl__L__ () { rl (&L); return 8; }
int __rl___HL___ () { uint8_t n = RAM (HL); rl (&n); STORE (HL, n); return 16; }
int __rrc__A__ () { rrc (&A); return 8; }
int __rrc__B__ () { rrc (&B); return 8; }
int __rrc__C__ () { rrc (&C); return 8; }
int __rrc__D__ () { rrc (&D); return 8; }
int __rrc__E__ () { rrc (&E); return 8; }
int __rrc__H__ () { rrc (&H); return 8; }
int __rrc__L__ () { rrc (&L); return 8; }
int __rrc___HL___ () { uint8_t n = RAM (HL); rrc (&n); STORE (HL, n); return 16; }
int __rr__A__ () { rr (&A); return 8; }
int __rr__B__ () { rr (&B); return 8; }
int __rr__C__ () { rr (&C); return 8; }
int __rr__D__ () { rr (&D); return 8; }
int __rr__E__ () { rr (&E); return 8; }
int __rr__H__ () { rr (&H); return 8; }
int __rr__L__ () { rr (&L); return 8; }
int __rr___HL___ () { uint8_t n = RAM (HL); rr (&n); STORE (HL, n); return 16; }
int __sla__A__ () { sla (&A); return 8; }
int __sla__B__ () { sla (&B); return 8; }
int __sla__C__ () { sla (&C); return 8; }
int __sla__D__ () { sla (&D); return 8; }
int __sla__E__ () { sla (&E); return 8; }
int __sla__H__ () { sla (&H); return 8; }
int __sla__L__ () { sla (&L); return 8; }
int __sla___HL___ () { uint8_t n = RAM (HL); sla (&n); STORE (HL, n); return 16; }
int __sra__A__ () { sra (&A); return 8; }
int __sra__B__ () { sra (&B); return 8; }
int __sra__C__ () { sra (&C); return 8; }
int __sra__D__ () { sra (&D); return 8; }
int __sra__E__ () { sra (&E); return 8; }
int __sra__H__ () { sra (&H); return 8; }
int __sra__L__ () { sra (&L); return 8; }
int __sra___HL___ () { uint8_t n = RAM (HL); sra (&n); STORE (HL, n); return 16; }
int __srl__A__ () { srl (&A); return 8; }
int __srl__B__ () { srl (&B); return 8; }
int __srl__C__ () { srl (&C); return 8; }
int __srl__D__ () { srl (&D); return 8; }
int __srl__E__ () { srl (&E); return 8; }
int __srl__H__ () { srl (&H); return 8; }
int __srl__L__ () { srl (&L); return 8; }
int __srl___HL___ () { uint8_t n = RAM (HL); srl (&n); STORE (HL, n); return 16; }
int __bit__A_0__ () { bit (A,0); return 8; }
int __bit__A_1__ () { bit (A,1); return 8; }
int __bit__A_2__ () { bit (A,2); return 8; }
int __bit__A_3__ () { bit (A,3); return 8; }
int __bit__A_4__ () { bit (A,4); return 8; }
int __bit__A_5__ () { bit (A,5); return 8; }
int __bit__A_6__ () { bit (A,6); return 8; }
int __bit__A_7__ () { bit (A,7); return 8; }
int __bit__B_0__ () { bit (B,0); return 8; }
int __bit__B_1__ () { bit (B,1); return 8; }
int __bit__B_2__ () { bit (B,2); return 8; }
int __bit__B_3__ () { bit (B,3); return 8; }
int __bit__B_4__ () { bit (B,4); return 8; }
int __bit__B_5__ () { bit (B,5); return 8; }
int __bit__B_6__ () { bit (B,6); return 8; }
int __bit__B_7__ () { bit (B,7); return 8; }
int __bit__C_0__ () { bit (C,0); return 8; }
int __bit__C_1__ () { bit (C,1); return 8; }
int __bit__C_2__ () { bit (C,2); return 8; }
int __bit__C_3__ () { bit (C,3); return 8; }
int __bit__C_4__ () { bit (C,4); return 8; }
int __bit__C_5__ () { bit (C,5); return 8; }
int __bit__C_6__ () { bit (C,6); return 8; }
int __bit__C_7__ () { bit (C,7); return 8; }
int __bit__D_0__ () { bit (D,0); return 8; }
int __bit__D_1__ () { bit (D,1); return 8; }
int __bit__D_2__ () { bit (D,2); return 8; }
int __bit__D_3__ () { bit (D,3); return 8; }
int __bit__D_4__ () { bit (D,4); return 8; }
int __bit__D_5__ () { bit (D,5); return 8; }
int __bit__D_6__ () { bit (D,6); return 8; }
int __bit__D_7__ () { bit (D,7); return 8; }
int __bit__E_0__ () { bit (E,0); return 8; }
int __bit__E_1__ () { bit (E,1); return 8; }
int __bit__E_2__ () { bit (E,2); return 8; }
int __bit__E_3__ () { bit (E,3); return 8; }
int __bit__E_4__ () { bit (E,4); return 8; }
int __bit__E_5__ () { bit (E,5); return 8; }
int __bit__E_6__ () { bit (E,6); return 8; }
int __bit__E_7__ () { bit (E,7); return 8; }
int __bit__H_0__ () { bit (H,0); return 8; }
int __bit__H_1__ () { bit (H,1); return 8; }
int __bit__H_2__ () { bit (H,2); return 8; }
int __bit__H_3__ () { bit (H,3); return 8; }
int __bit__H_4__ () { bit (H,4); return 8; }
int __bit__H_5__ () { bit (H,5); return 8; }
int __bit__H_6__ () { bit (H,6); return 8; }
int __bit__H_7__ () { bit (H,7); return 8; }
int __bit__L_0__ () { bit (L,0); return 8; }
int __bit__L_1__ () { bit (L,1); return 8; }
int __bit__L_2__ () { bit (L,2); return 8; }
int __bit__L_3__ () { bit (L,3); return 8; }
int __bit__L_4__ () { bit (L,4); return 8; }
int __bit__L_5__ () { bit (L,5); return 8; }
int __bit__L_6__ () { bit (L,6); return 8; }
int __bit__L_7__ () { bit (L,7); return 8; }
int __bit___HL__0__ () { bit (RAM (HL),0); return 12; }
int __bit___HL__1__ () { bit (RAM (HL),1); return 12; }
int __bit___HL__2__ () { bit (RAM (HL),2); return 12; }
int __bit___HL__3__ () { bit (RAM (HL),3); return 12; }
int __bit___HL__4__ () { bit (RAM (HL),4); return 12; }
int __bit___HL__5__ () { bit (RAM (HL),5); return 12; }
int __bit___HL__6__ () { bit (RAM (HL),6); return 12; }
int __bit___HL__7__ () { bit (RAM (HL),7); return 12; }
int __set__A_0__ () { set (&A,0); return 8; }
int __set__A_1__ () { set (&A,1); return 8; }
int __set__A_2__ () { set (&A,2); return 8; }
int __set__A_3__ () { set (&A,3); return 8; }
int __set__A_4__ () { set (&A,4); return 8; }
int __set__A_5__ () { set (&A,5); return 8; }
int __set__A_6__ () { set (&A,6); return 8; }
int __set__A_7__ () { set (&A,7); return 8; }
int __set__B_0__ () { set (&B,0); return 8; }
int __set__B_1__ () { set (&B,1); return 8; }
int __set__B_2__ () { set (&B,2); return 8; }
int __set__B_3__ () { set (&B,3); return 8; }
int __set__B_4__ () { set (&B,4); return 8; }
int __set__B_5__ () { set (&B,5); return 8; }
int __set__B_6__ () { set (&B,6); return 8; }
int __set__B_7__ () { set (&B,7); return 8; }
int __set__C_0__ () { set (&C,0); return 8; }
int __set__C_1__ () { set (&C,1); return 8; }
int __set__C_2__ () { set (&C,2); return 8; }
int __set__C_3__ () { set (&C,3); return 8; }
int __set__C_4__ () { set (&C,4); return 8; }
int __set__C_5__ () { set (&C,5); return 8; }
int __set__C_6__ () { set (&C,6); return 8; }
int __set__C_7__ () { set (&C,7); return 8; }
int __set__D_0__ () { set (&D,0); return 8; }
int __set__D_1__ () { set (&D,1); return 8; }
int __set__D_2__ () { set (&D,2); return 8; }
int __set__D_3__ () { set (&D,3); return 8; }
int __set__D_4__ () { set (&D,4); return 8; }
int __set__D_5__ () { set (&D,5); return 8; }
int __set__D_6__ () { set (&D,6); return 8; }
int __set__D_7__ () { set (&D,7); return 8; }
int __set__E_0__ () { set (&E,0); return 8; }
int __set__E_1__ () { set (&E,1); return 8; }
int __set__E_2__ () { set (&E,2); return 8; }
int __set__E_3__ () { set (&E,3); return 8; }
int __set__E_4__ () { set (&E,4); return 8; }
int __set__E_5__ () { set (&E,5); return 8; }
int __set__E_6__ () { set (&E,6); return 8; }
int __set__E_7__ () { set (&E,7); return 8; }
int __set__H_0__ () { set (&H,0); return 8; }
int __set__H_1__ () { set (&H,1); return 8; }
int __set__H_2__ () { set (&H,2); return 8; }
int __set__H_3__ () { set (&H,3); return 8; }
int __set__H_4__ () { set (&H,4); return 8; }
int __set__H_5__ () { set (&H,5); return 8; }
int __set__H_6__ () { set (&H,6); return 8; }
int __set__H_7__ () { set (&H,7); return 8; }
int __set__L_0__ () { set (&L,0); return 8; }
int __set__L_1__ () { set (&L,1); return 8; }
int __set__L_2__ () { set (&L,2); return 8; }
int __set__L_3__ () { set (&L,3); return 8; }
int __set__L_4__ () { set (&L,4); return 8; }
int __set__L_5__ () { set (&L,5); return 8; }
int __set__L_6__ () { set (&L,6); return 8; }
int __set__L_7__ () { set (&L,7); return 8; }
int __set___HL__0__ () { uint8_t n = RAM (HL); set (&n,0); STORE (HL, n); return 16; }
int __set___HL__1__ () { uint8_t n = RAM (HL); set (&n,1); STORE (HL, n); return 16; }
int __set___HL__2__ () { uint8_t n = RAM (HL); set (&n,2); STORE (HL, n); return 16; }
int __set___HL__3__ () { uint8_t n = RAM (HL); set (&n,3); STORE (HL, n); return 16; }
int __set___HL__4__ () { uint8_t n = RAM (HL); set (&n,4); STORE (HL, n); return 16; }
int __set___HL__5__ () { uint8_t n = RAM (HL); set (&n,5); STORE (HL, n); return 16; }
int __set___HL__6__ () { uint8_t n = RAM (HL); set (&n,6); STORE (HL, n); return 16; }
int __set___HL__7__ () { uint8_t n = RAM (HL); set (&n,7); STORE (HL, n); return 16; }
int __res__A_0__ () { res (&A,0); return 8; }
int __res__A_1__ () { res (&A,1); return 8; }
int __res__A_2__ () { res (&A,2); return 8; }
int __res__A_3__ () { res (&A,3); return 8; }
int __res__A_4__ () { res (&A,4); return 8; }
int __res__A_5__ () { res (&A,5); return 8; }
int __res__A_6__ () { res (&A,6); return 8; }
int __res__A_7__ () { res (&A,7); return 8; }
int __res__B_0__ () { res (&B,0); return 8; }
int __res__B_1__ () { res (&B,1); return 8; }
int __res__B_2__ () { res (&B,2); return 8; }
int __res__B_3__ () { res (&B,3); return 8; }
int __res__B_4__ () { res (&B,4); return 8; }
int __res__B_5__ () { res (&B,5); return 8; }
int __res__B_6__ () { res (&B,6); return 8; }
int __res__B_7__ () { res (&B,7); return 8; }
int __res__C_0__ () { res (&C,0); return 8; }
int __res__C_1__ () { res (&C,1); return 8; }
int __res__C_2__ () { res (&C,2); return 8; }
int __res__C_3__ () { res (&C,3); return 8; }
int __res__C_4__ () { res (&C,4); return 8; }
int __res__C_5__ () { res (&C,5); return 8; }
int __res__C_6__ () { res (&C,6); return 8; }
int __res__C_7__ () { res (&C,7); return 8; }
int __res__D_0__ () { res (&D,0); return 8; }
int __res__D_1__ () { res (&D,1); return 8; }
int __res__D_2__ () { res (&D,2); return 8; }
int __res__D_3__ () { res (&D,3); return 8; }
int __res__D_4__ () { res (&D,4); return 8; }
int __res__D_5__ () { res (&D,5); return 8; }
int __res__D_6__ () { res (&D,6); return 8; }
int __res__D_7__ () { res (&D,7); return 8; }
int __res__E_0__ () { res (&E,0); return 8; }
int __res__E_1__ () { res (&E,1); return 8; }
int __res__E_2__ () { res (&E,2); return 8; }
int __res__E_3__ () { res (&E,3); return 8; }
int __res__E_4__ () { res (&E,4); return 8; }
int __res__E_5__ () { res (&E,5); return 8; }
int __res__E_6__ () { res (&E,6); return 8; }
int __res__E_7__ () { res (&E,7); return 8; }
int __res__H_0__ () { res (&H,0); return 8; }
int __res__H_1__ () { res (&H,1); return 8; }
int __res__H_2__ () { res (&H,2); return 8; }
int __res__H_3__ () { res (&H,3); return 8; }
int __res__H_4__ () { res (&H,4); return 8; }
int __res__H_5__ () { res (&H,5); return 8; }
int __res__H_6__ () { res (&H,6); return 8; }
int __res__H_7__ () { res (&H,7); return 8; }
int __res__L_0__ () { res (&L,0); return 8; }
int __res__L_1__ () { res (&L,1); return 8; }
int __res__L_2__ () { res (&L,2); return 8; }
int __res__L_3__ () { res (&L,3); return 8; }
int __res__L_4__ () { res (&L,4); return 8; }
int __res__L_5__ () { res (&L,5); return 8; }
int __res__L_6__ () { res (&L,6); return 8; }
int __res__L_7__ () { res (&L,7); return 8; }
int __res___HL__0__ () { uint8_t n = RAM (HL); res (&n,0); STORE (HL, n); return 16; }
int __res___HL__1__ () { uint8_t n = RAM (HL); res (&n,1); STORE (HL, n); return 16; }
int __res___HL__2__ () { uint8_t n = RAM (HL); res (&n,2); STORE (HL, n); return 16; }
int __res___HL__3__ () { uint8_t n = RAM (HL); res (&n,3); STORE (HL, n); return 16; }
int __res___HL__4__ () { uint8_t n = RAM (HL); res (&n,4); STORE (HL, n); return 16; }
int __res___HL__5__ () { uint8_t n = RAM (HL); res (&n,5); STORE (HL, n); return 16; }
int __res___HL__6__ () { uint8_t n = RAM (HL); res (&n,6); STORE (HL, n); return 16; }
int __res___HL__7__ () { uint8_t n = RAM (HL); res (&n,7); STORE (HL, n); return 16; }
int __jp__nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); jp (nn); return 16; }
int __jpcc__JP_CC_NZ_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); jpcc (JP_CC_NZ,nn); return 12; }
int __jpcc__JP_CC_Z_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); jpcc (JP_CC_Z,nn); return 12; }
int __jpcc__JP_CC_NC_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); jpcc (JP_CC_NC,nn); return 12; }
int __jpcc__JP_CC_C_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); jpcc (JP_CC_C,nn); return 12; }
int __jp__HL__ () { jp (HL); return 4; }
int __jr__n__ () { uint8_t n = RAM (pc ++); jr (n); return 12; }
int __jrcc__JP_CC_NZ_n__ () { uint8_t n = RAM (pc ++); jrcc (JP_CC_NZ,n); return 8; }
int __jrcc__JP_CC_Z_n__ () { uint8_t n = RAM (pc ++); jrcc (JP_CC_Z,n); return 8; }
int __jrcc__JP_CC_NC_n__ () { uint8_t n = RAM (pc ++); jrcc (JP_CC_NC,n); return 8; }
int __jrcc__JP_CC_C_n__ () { uint8_t n = RAM (pc ++); jrcc (JP_CC_C,n); return 8; }
int __call__nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); call (nn); return 24; }
int __callcc__JP_CC_NZ_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); callcc (JP_CC_NZ,nn); return 12; }
int __callcc__JP_CC_Z_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); callcc (JP_CC_Z,nn); return 12; }
int __callcc__JP_CC_NC_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); callcc (JP_CC_NC,nn); return 12; }
int __callcc__JP_CC_C_nn__ () { uint16_t nn = RAM (pc ++); nn |= (RAM (pc ++) << 8); callcc (JP_CC_C,nn); return 12; }
int __rst__0x00__ () { rst (0x00); return 16; }
int __rst__0x08__ () { rst (0x08); return 16; }
int __rst__0x10__ () { rst (0x10); return 16; }
int __rst__0x18__ () { rst (0x18); return 16; }
int __rst__0x20__ () { rst (0x20); return 16; }
int __rst__0x28__ () { rst (0x28); return 16; }
int __rst__0x30__ () { rst (0x30); return 16; }
int __rst__0x38__ () { rst (0x38); return 16; }
int __ret__ () { ret (); return 16; }
int __retcc__JP_CC_NZ__ () { retcc (JP_CC_NZ); return 8; }
int __retcc__JP_CC_Z__ () { retcc (JP_CC_Z); return 8; }
int __retcc__JP_CC_NC__ () { retcc (JP_CC_NC); return 8; }
int __retcc__JP_CC_C__ () { retcc (JP_CC_C); return 8; }
int __reti__ () { reti (); return 16; }

const operation operations_cb[256] = {
// 00: RLC B
{ "RLC B", &__rlc__B__, 0, 8 },
// 01: RLC C
{ "RLC C", &__rlc__C__, 0, 8 },
// 02: RLC D
{ "RLC D", &__rlc__D__, 0, 8 },
// 03: RLC E
{ "RLC E", &__rlc__E__, 0, 8 },
// 04: RLC H
{ "RLC H", &__rlc__H__, 0, 8 },
// 05: RLC L
{ "RLC L", &__rlc__L__, 0, 8 },
// 06: RLC (HL)
{ "RLC (HL)", &__rlc___HL___, 0, 16 },
// 07: RLC A
{ "RLC A", &__rlc__A__, 0, 8 },
// 08: RRC B
{ "RRC B", &__rrc__B__, 0, 8 },
// 09: RRC C
{ "RRC C", &__rrc__C__, 0, 8 },
// 0A: RRC D
{ "RRC D", &__rrc__D__, 0, 8 },
// 0B: RRC E
{ "RRC E", &__rrc__E__, 0, 8 },
// 0C: RRC H
{ "RRC H", &__rrc__H__, 0, 8 },
// 0D: RRC L
{ "RRC L", &__rrc__L__, 0, 8 },
// 0E: RRC (HL)
{ "RRC (HL)", &__rrc___HL___, 0, 16 },
// 0F: RRC A
{ "RRC A", &__rrc__A__, 0, 8 },
// 10: RL B
{ "RL B", &__rl__B__, 0, 8 },
// 11: RL C
{ "RL C", &__rl__C__, 0, 8 },
// 12: RL D
{ "RL D", &__rl__D__, 0, 8 },
// 13: RL E
{ "RL E", &__rl__E__, 0, 8 },
// 14: RL H
{ "RL H", &__rl__H__, 0, 8 },
// 15: RL L
{ "RL L", &__rl__L__, 0, 8 },
// 16: RL (HL)
{ "RL (HL)", &__rl___HL___, 0, 16 },
// 17: RL A
{ "RL A", &__rl__A__, 0, 8 },
// 18: RR B
{ "RR B", &__rr__B__, 0, 8 },
// 19: RR C
{ "RR C", &__rr__C__, 0, 8 },
// 1A: RR D
{ "RR D", &__rr__D__, 0, 8 },
// 1B: RR E
{ "RR E", &__rr__E__, 0, 8 },
// 1C: RR H
{ "RR H", &__rr__H__, 0, 8 },
// 1D: RR L
{ "RR L", &__rr__L__, 0, 8 },
// 1E: RR (HL)
{ "RR (HL)", &__rr___HL___, 0, 16 },
// 1F: RR A
{ "RR A", &__rr__A__, 0, 8 },
// 20: SLA B
{ "SLA B", &__sla__B__, 0, 8 },
// 21: SLA C
{ "SLA C", &__sla__C__, 0, 8 },
// 22: SLA D
{ "SLA D", &__sla__D__, 0, 8 },
// 23: SLA E
{ "SLA E", &__sla__E__, 0, 8 },
// 24: SLA H
{ "SLA H", &__sla__H__, 0, 8 },
// 25: SLA L
{ "SLA L", &__sla__L__, 0, 8 },
// 26: SLA (HL)
{ "SLA (HL)", &__sla___HL___, 0, 16 },
// 27: SLA A
{ "SLA A", &__sla__A__, 0, 8 },
// 28: SRA B
{ "SRA B", &__sra__B__, 0, 8 },
// 29: SRA C
{ "SRA C", &__sra__C__, 0, 8 },
// 2A: SRA D
{ "SRA D", &__sra__D__, 0, 8 },
// 2B: SRA E
{ "SRA E", &__sra__E__, 0, 8 },
// 2C: SRA H
{ "SRA H", &__sra__H__, 0, 8 },
// 2D: SRA L
{ "SRA L", &__sra__L__, 0, 8 },
// 2E: SRA (HL)
{ "SRA (HL)", &__sra___HL___, 0, 16 },
// 2F: SRA A
{ "SRA A", &__sra__A__, 0, 8 },
// 30: SWAP B
{ "SWAP B", &__swap__B__, 0, 8 },
// 31: SWAP C
{ "SWAP C", &__swap__C__, 0, 8 },
// 32: SWAP D
{ "SWAP D", &__swap__D__, 0, 8 },
// 33: SWAP E
{ "SWAP E", &__swap__E__, 0, 8 },
// 34: SWAP H
{ "SWAP H", &__swap__H__, 0, 8 },
// 35: SWAP L
{ "SWAP L", &__swap__L__, 0, 8 },
// 36: SWAP (HL)
{ "SWAP (HL)", &__swap___HL___, 0, 16 },
// 37: SWAP A
{ "SWAP A", &__swap__A__, 0, 8 },
// 38: SRL B
{ "SRL B", &__srl__B__, 0, 8 },
// 39: SRL C
{ "SRL C", &__srl__C__, 0, 8 },
// 3A: SRL D
{ "SRL D", &__srl__D__, 0, 8 },
// 3B: SRL E
{ "SRL E", &__srl__E__, 0, 8 },
// 3C: SRL H
{ "SRL H", &__srl__H__, 0, 8 },
// 3D: SRL L
{ "SRL L", &__srl__L__, 0, 8 },
// 3E: SRL (HL)
{ "SRL (HL)", &__srl___HL___, 0, 16 },
// 3F: SRL A
{ "SRL A", &__srl__A__, 0, 8 },
// 40: BIT B,0
{ "BIT B,0", &__bit__B_0__, 0, 8 },
// 41: BIT C,0
{ "BIT C,0", &__bit__C_0__, 0, 8 },
// 42: BIT D,0
{ "BIT D,0", &__bit__D_0__, 0, 8 },
// 43: BIT E,0
{ "BIT E,0", &__bit__E_0__, 0, 8 },
// 44: BIT H,0
{ "BIT H,0", &__bit__H_0__, 0, 8 },
// 45: BIT L,0
{ "BIT L,0", &__bit__L_0__, 0, 8 },
// 46: BIT (HL),0
{ "BIT (HL),0", &__bit___HL__0__, 0, 12 },
// 47: BIT A,0
{ "BIT A,0", &__bit__A_0__, 0, 8 },
// 48: BIT B,1
{ "BIT B,1", &__bit__B_1__, 0, 8 },
// 49: BIT C,1
{ "BIT C,1", &__bit__C_1__, 0, 8 },
// 4A: BIT D,1
{ "BIT D,1", &__bit__D_1__, 0, 8 },
// 4B: BIT E,1
{ "BIT E,1", &__bit__E_1__, 0, 8 },
// 4C: BIT H,1
{ "BIT H,1", &__bit__H_1__, 0, 8 },
// 4D: BIT L,1
{ "BIT L,1", &__bit__L_1__, 0, 8 },
// 4E: BIT (HL),1
{ "BIT (HL),1", &__bit___HL__1__, 0, 12 },
// 4F: BIT A,1
{ "BIT A,1", &__bit__A_1__, 0, 8 },
// 50: BIT B,2
{ "BIT B,2", &__bit__B_2__, 0, 8 },
// 51: BIT C,2
{ "BIT C,2", &__bit__C_2__, 0, 8 },
// 52: BIT D,2
{ "BIT D,2", &__bit__D_2__, 0, 8 },
// 53: BIT E,2
{ "BIT E,2", &__bit__E_2__, 0, 8 },
// 54: BIT H,2
{ "BIT H,2", &__bit__H_2__, 0, 8 },
// 55: BIT L,2
{ "BIT L,2", &__bit__L_2__, 0, 8 },
// 56: BIT (HL),2
{ "BIT (HL),2", &__bit___HL__2__, 0, 12 },
// 57: BIT A,2
{ "BIT A,2", &__bit__A_2__, 0, 8 },
// 58: BIT B,3
{ "BIT B,3", &__bit__B_3__, 0, 8 },
// 59: BIT C,3
{ "BIT C,3", &__bit__C_3__, 0, 8 },
// 5A: BIT D,3
{ "BIT D,3", &__bit__D_3__, 0, 8 },
// 5B: BIT E,3
{ "BIT E,3", &__bit__E_3__, 0, 8 },
// 5C: BIT H,3
{ "BIT H,3", &__bit__H_3__, 0, 8 },
// 5D: BIT L,3
{ "BIT L,3", &__bit__L_3__, 0, 8 },
// 5E: BIT (HL),3
{ "BIT (HL),3", &__bit___HL__3__, 0, 12 },
// 5F: BIT A,3
{ "BIT A,3", &__bit__A_3__, 0, 8 },
// 60: BIT B,4
{ "BIT B,4", &__bit__B_4__, 0, 8 },
// 61: BIT C,4
{ "BIT C,4", &__bit__C_4__, 0, 8 },
// 62: BIT D,4
{ "BIT D,4", &__bit__D_4__, 0, 8 },
// 63: BIT E,4
{ "BIT E,4", &__bit__E_4__, 0, 8 },
// 64: BIT H,4
{ "BIT H,4", &__bit__H_4__, 0, 8 },
// 65: BIT L,4
{ "BIT L,4", &__bit__L_4__, 0, 8 },
// 66: BIT (HL),4
{ "BIT (HL),4", &__bit___HL__4__, 0, 12 },
// 67: BIT A,4
{ "BIT A,4", &__bit__A_4__, 0, 8 },
// 68: BIT B,5
{ "BIT B,5", &__bit__B_5__, 0, 8 },
// 69: BIT C,5
{ "BIT C,5", &__bit__C_5__, 0, 8 },
// 6A: BIT D,5
{ "BIT D,5", &__bit__D_5__, 0, 8 },
// 6B: BIT E,5
{ "BIT E,5", &__bit__E_5__, 0, 8 },
// 6C: BIT H,5
{ "BIT H,5", &__bit__H_5__, 0, 8 },
// 6D: BIT L,5
{ "BIT L,5", &__bit__L_5__, 0, 8 },
// 6E: BIT (HL),5
{ "BIT (HL),5", &__bit___HL__5__, 0, 12 },
// 6F: BIT A,5
{ "BIT A,5", &__bit__A_5__, 0, 8 },
// 70: BIT B,6
{ "BIT B,6", &__bit__B_6__, 0, 8 },
// 71: BIT C,6
{ "BIT C,6", &__bit__C_6__, 0, 8 },
// 72: BIT D,6
{ "BIT D,6", &__bit__D_6__, 0, 8 },
// 73: BIT E,6
{ "BIT E,6", &__bit__E_6__, 0, 8 },
// 74: BIT H,6
{ "BIT H,6", &__bit__H_6__, 0, 8 },
// 75: BIT L,6
{ "BIT L,6", &__bit__L_6__, 0, 8 },
// 76: BIT (HL),6
{ "BIT (HL),6", &__bit___HL__6__, 0, 12 },
// 77: BIT A,6
{ "BIT A,6", &__bit__A_6__, 0, 8 },
// 78: BIT B,7
{ "BIT B,7", &__bit__B_7__, 0, 8 },
// 79: BIT C,7
{ "BIT C,7", &__bit__C_7__, 0, 8 },
// 7A: BIT D,7
{ "BIT D,7", &__bit__D_7__, 0, 8 },
// 7B: BIT E,7
{ "BIT E,7", &__bit__E_7__, 0, 8 },
// 7C: BIT H,7
{ "BIT H,7", &__bit__H_7__, 0, 8 },
// 7D: BIT L,7
{ "BIT L,7", &__bit__L_7__, 0, 8 },
// 7E: BIT (HL),7
{ "BIT (HL),7", &__bit___HL__7__, 0, 12 },
// 7F: BIT A,7
{ "BIT A,7", &__bit__A_7__, 0, 8 },
// 80: RES B,0
{ "RES B,0", &__res__B_0__, 0, 8 },
// 81: RES C,0
{ "RES C,0", &__res__C_0__, 0, 8 },
// 82: RES D,0
{ "RES D,0", &__res__D_0__, 0, 8 },
// 83: RES E,0
{ "RES E,0", &__res__E_0__, 0, 8 },
// 84: RES H,0
{ "RES H,0", &__res__H_0__, 0, 8 },
// 85: RES L,0
{ "RES L,0", &__res__L_0__, 0, 8 },
// 86: RES (HL),0
{ "RES (HL),0", &__res___HL__0__, 0, 16 },
// 87: RES A,0
{ "RES A,0", &__res__A_0__, 0, 8 },
// 88: RES B,1
{ "RES B,1", &__res__B_1__, 0, 8 },
// 89: RES C,1
{ "RES C,1", &__res__C_1__, 0, 8 },
// 8A: RES D,1
{ "RES D,1", &__res__D_1__, 0, 8 },
// 8B: RES E,1
{ "RES E,1", &__res__E_1__, 0, 8 },
// 8C: RES H,1
{ "RES H,1", &__res__H_1__, 0, 8 },
// 8D: RES L,1
{ "RES L,1", &__res__L_1__, 0, 8 },
// 8E: RES (HL),1
{ "RES (HL),1", &__res___HL__1__, 0, 16 },
// 8F: RES A,1
{ "RES A,1", &__res__A_1__, 0, 8 },
// 90: RES B,2
{ "RES B,2", &__res__B_2__, 0, 8 },
// 91: RES C,2
{ "RES C,2", &__res__C_2__, 0, 8 },
// 92: RES D,2
{ "RES D,2", &__res__D_2__, 0, 8 },
// 93: RES E,2
{ "RES E,2", &__res__E_2__, 0, 8 },
// 94: RES H,2
{ "RES H,2", &__res__H_2__, 0, 8 },
// 95: RES L,2
{ "RES L,2", &__res__L_2__, 0, 8 },
// 96: RES (HL),2
{ "RES (HL),2", &__res___HL__2__, 0, 16 },
// 97: RES A,2
{ "RES A,2", &__res__A_2__, 0, 8 },
// 98: RES B,3
{ "RES B,3", &__res__B_3__, 0, 8 },
// 99: RES C,3
{ "RES C,3", &__res__C_3__, 0, 8 },
// 9A: RES D,3
{ "RES D,3", &__res__D_3__, 0, 8 },
// 9B: RES E,3
{ "RES E,3", &__res__E_3__, 0, 8 },
// 9C: RES H,3
{ "RES H,3", &__res__H_3__, 0, 8 },
// 9D: RES L,3
{ "RES L,3", &__res__L_3__, 0, 8 },
// 9E: RES (HL),3
{ "RES (HL),3", &__res___HL__3__, 0, 16 },
// 9F: RES A,3
{ "RES A,3", &__res__A_3__, 0, 8 },
// A0: RES B,4
{ "RES B,4", &__res__B_4__, 0, 8 },
// A1: RES C,4
{ "RES C,4", &__res__C_4__, 0, 8 },
// A2: RES D,4
{ "RES D,4", &__res__D_4__, 0, 8 },
// A3: RES E,4
{ "RES E,4", &__res__E_4__, 0, 8 },
// A4: RES H,4
{ "RES H,4", &__res__H_4__, 0, 8 },
// A5: RES L,4
{ "RES L,4", &__res__L_4__, 0, 8 },
// A6: RES (HL),4
{ "RES (HL),4", &__res___HL__4__, 0, 16 },
// A7: RES A,4
{ "RES A,4", &__res__A_4__, 0, 8 },
// A8: RES B,5
{ "RES B,5", &__res__B_5__, 0, 8 },
// A9: RES C,5
{ "RES C,5", &__res__C_5__, 0, 8 },
// AA: RES D,5
{ "RES D,5", &__res__D_5__, 0, 8 },
// AB: RES E,5
{ "RES E,5", &__res__E_5__, 0, 8 },
// AC: RES H,5
{ "RES H,5", &__res__H_5__, 0, 8 },
// AD: RES L,5
{ "RES L,5", &__res__L_5__, 0, 8 },
// AE: RES (HL),5
{ "RES (HL),5", &__res___HL__5__, 0, 16 },
// AF: RES A,5
{ "RES A,5", &__res__A_5__, 0, 8 },
// B0: RES B,6
{ "RES B,6", &__res__B_6__, 0, 8 },
// B1: RES C,6
{ "RES C,6", &__res__C_6__, 0, 8 },
// B2: RES D,6
{ "RES D,6", &__res__D_6__, 0, 8 },
// B3: RES E,6
{ "RES E,6", &__res__E_6__, 0, 8 },
// B4: RES H,6
{ "RES H,6", &__res__H_6__, 0, 8 },
// B5: RES L,6
{ "RES L,6", &__res__L_6__, 0, 8 },
// B6: RES (HL),6
{ "RES (HL),6", &__res___HL__6__, 0, 16 },
// B7: RES A,6
{ "RES A,6", &__res__A_6__, 0, 8 },
// B8: RES B,7
{ "RES B,7", &__res__B_7__, 0, 8 },
// B9: RES C,7
{ "RES C,7", &__res__C_7__, 0, 8 },
// BA: RES D,7
{ "RES D,7", &__res__D_7__, 0, 8 },
// BB: RES E,7
{ "RES E,7", &__res__E_7__, 0, 8 },
// BC: RES H,7
{ "RES H,7", &__res__H_7__, 0, 8 },
// BD: RES L,7
{ "RES L,7", &__res__L_7__, 0, 8 },
// BE: RES (HL),7
{ "RES (HL),7", &__res___HL__7__, 0, 16 },
// BF: RES A,7
{ "RES A,7", &__res__A_7__, 0, 8 },
// C0: SET B,0
{ "SET B,0", &__set__B_0__, 0, 8 },
// C1: SET C,0
{ "SET C,0", &__set__C_0__, 0, 8 },
// C2: SET D,0
{ "SET D,0", &__set__D_0__, 0, 8 },
// C3: SET E,0
{ "SET E,0", &__set__E_0__, 0, 8 },
// C4: SET H,0
{ "SET H,0", &__set__H_0__, 0, 8 },
// C5: SET L,0
{ "SET L,0", &__set__L_0__, 0, 8 },
// C6: SET (HL),0
{ "SET (HL),0", &__set___HL__0__, 0, 16 },
// C7: SET A,0
{ "SET A,0", &__set__A_0__, 0, 8 },
// C8: SET B,1
{ "SET B,1", &__set__B_1__, 0, 8 },
// C9: SET C,1
{ "SET C,1", &__set__C_1__, 0, 8 },
// CA: SET D,1
{ "SET D,1", &__set__D_1__, 0, 8 },
// CB: SET E,1
{ "SET E,1", &__set__E_1__, 0, 8 },
// CC: SET H,1
{ "SET H,1", &__set__H_1__, 0, 8 },
// CD: SET L,1
{ "SET L,1", &__set__L_1__, 0, 8 },
// CE: SET (HL),1
{ "SET (HL),1", &__set___HL__1__, 0, 16 },
// CF: SET A,1
{ "SET A,1", &__set__A_1__, 0, 8 },
// D0: SET B,2
{ "SET B,2", &__set__B_2__, 0, 8 },
// D1: SET C,2
{ "SET C,2", &__set__C_2__, 0, 8 },
// D2: SET D,2
{ "SET D,2", &__set__D_2__, 0, 8 },
// D3: SET E,2
{ "SET E,2", &__set__E_2__, 0, 8 },
// D4: SET H,2
{ "SET H,2", &__set__H_2__, 0, 8 },
// D5: SET L,2
{ "SET L,2", &__set__L_2__, 0, 8 },
// D6: SET (HL),2
{ "SET (HL),2", &__set___HL__2__, 0, 16 },
// D7: SET A,2
{ "SET A,2", &__set__A_2__, 0, 8 },
// D8: SET B,3
{ "SET B,3", &__set__B_3__, 0, 8 },
// D9: SET C,3
{ "SET C,3", &__set__C_3__, 0, 8 },
// DA: SET D,3
{ "SET D,3", &__set__D_3__, 0, 8 },
// DB: SET E,3
{ "SET E,3", &__set__E_3__, 0, 8 },
// DC: SET H,3
{ "SET H,3", &__set__H_3__, 0, 8 },
// DD: SET L,3
{ "SET L,3", &__set__L_3__, 0, 8 },
// DE: SET (HL),3
{ "SET (HL),3", &__set___HL__3__, 0, 16 },
// DF: SET A,3
{ "SET A,3", &__set__A_3__, 0, 8 },
// E0: SET B,4
{ "SET B,4", &__set__B_4__, 0, 8 },
// E1: SET C,4
{ "SET C,4", &__set__C_4__, 0, 8 },
// E2: SET D,4
{ "SET D,4", &__set__D_4__, 0, 8 },
// E3: SET E,4
{ "SET E,4", &__set__E_4__, 0, 8 },
// E4: SET H,4
{ "SET H,4", &__set__H_4__, 0, 8 },
// E5: SET L,4
{ "SET L,4", &__set__L_4__, 0, 8 },
// E6: SET (HL),4
{ "SET (HL),4", &__set___HL__4__, 0, 16 },
// E7: SET A,4
{ "SET A,4", &__set__A_4__, 0, 8 },
// E8: SET B,5
{ "SET B,5", &__set__B_5__, 0, 8 },
// E9: SET C,5
{ "SET C,5", &__set__C_5__, 0, 8 },
// EA: SET D,5
{ "SET D,5", &__set__D_5__, 0, 8 },
// EB: SET E,5
{ "SET E,5", &__set__E_5__, 0, 8 },
// EC: SET H,5
{ "SET H,5", &__set__H_5__, 0, 8 },
// ED: SET L,5
{ "SET L,5", &__set__L_5__, 0, 8 },
// EE: SET (HL),5
{ "SET (HL),5", &__set___HL__5__, 0, 16 },
// EF: SET A,5
{ "SET A,5", &__set__A_5__, 0, 8 },
// F0: SET B,6
{ "SET B,6", &__set__B_6__, 0, 8 },
// F1: SET C,6
{ "SET C,6", &__set__C_6__, 0, 8 },
// F2: SET D,6
{ "SET D,6", &__set__D_6__, 0, 8 },
// F3: SET E,6
{ "SET E,6", &__set__E_6__, 0, 8 },
// F4: SET H,6
{ "SET H,6", &__set__H_6__, 0, 8 },
// F5: SET L,6
{ "SET L,6", &__set__L_6__, 0, 8 },
// F6: SET (HL),6
{ "SET (HL),6", &__set___HL__6__, 0, 16 },
// F7: SET A,6
{ "SET A,6", &__set__A_6__, 0, 8 },
// F8: SET B,7
{ "SET B,7", &__set__B_7__, 0, 8 },
// F9: SET C,7
{ "SET C,7", &__set__C_7__, 0, 8 },
// FA: SET D,7
{ "SET D,7", &__set__D_7__, 0, 8 },
// FB: SET E,7
{ "SET E,7", &__set__E_7__, 0, 8 },
// FC: SET H,7
{ "SET H,7", &__set__H_7__, 0, 8 },
// FD: SET L,7
{ "SET L,7", &__set__L_7__, 0, 8 },
// FE: SET (HL),7
{ "SET (HL),7", &__set___HL__7__, 0, 16 },
// FF: SET A,7
{ "SET A,7", &__set__A_7__, 0, 8 },
};
int __cbxx__() { uint8_t op = RAM (pc ++); return operations_cb[op].instruction(); }

const operation operations[256] = {
// 00: NOP -/-
{ "NOP -/-", &__nop__, 0, 4 },
// 01: LD BC,nn
{ "LD BC,nn", &__ld__BC_nn__, 0, 12 },
// 02: LD (BC),A
{ "LD (BC),A", &__ld___BC__A__, 0, 8 },
// 03: INC16 BC
{ "INC16 BC", &__inc16__BC__, 0, 8 },
// 04: INC B
{ "INC B", &__inc__B__, 0, 4 },
// 05: DEC B
{ "DEC B", &__dec__B__, 0, 4 },
// 06: LD B,n
{ "LD B,n", &__ld__B_n__, 0, 8 },
// 07: RLCA -/-
{ "RLCA -/-", &__rlca__, 0, 4 },
// 08: LD (nn),SP
{ "LD (nn),SP", &__ld___nn__SP__, 0, 20 },
// 09: ADDHL BC
{ "ADDHL BC", &__addhl__BC__, 0, 8 },
// 0A: LD A,(BC)
{ "LD A,(BC)", &__ld__A__BC___, 0, 8 },
// 0B: DEC16 BC
{ "DEC16 BC", &__dec16__BC__, 0, 8 },
// 0C: INC C
{ "INC C", &__inc__C__, 0, 4 },
// 0D: DEC C
{ "DEC C", &__dec__C__, 0, 4 },
// 0E: LD C,n
{ "LD C,n", &__ld__C_n__, 0, 8 },
// 0F: RRCA -/-
{ "RRCA -/-", &__rrca__, 0, 4 },
// 10: STOP -/-
{ "STOP -/-", &__stop__, 0, 4 },
// 11: LD DE,nn
{ "LD DE,nn", &__ld__DE_nn__, 0, 12 },
// 12: LD (DE),A
{ "LD (DE),A", &__ld___DE__A__, 0, 8 },
// 13: INC16 DE
{ "INC16 DE", &__inc16__DE__, 0, 8 },
// 14: INC D
{ "INC D", &__inc__D__, 0, 4 },
// 15: DEC D
{ "DEC D", &__dec__D__, 0, 4 },
// 16: LD D,n
{ "LD D,n", &__ld__D_n__, 0, 8 },
// 17: RLA -/-
{ "RLA -/-", &__rla__, 0, 4 },
// 18: JR n
{ "JR n", &__jr__n__, 0, 12 },
// 19: ADDHL DE
{ "ADDHL DE", &__addhl__DE__, 0, 8 },
// 1A: LD A,(DE)
{ "LD A,(DE)", &__ld__A__DE___, 0, 8 },
// 1B: DEC16 DE
{ "DEC16 DE", &__dec16__DE__, 0, 8 },
// 1C: INC E
{ "INC E", &__inc__E__, 0, 4 },
// 1D: DEC E
{ "DEC E", &__dec__E__, 0, 4 },
// 1E: LD E,n
{ "LD E,n", &__ld__E_n__, 0, 8 },
// 1F: RRA -/-
{ "RRA -/-", &__rra__, 0, 4 },
// 20: JRCC JP_CC_NZ,n
{ "JRCC JP_CC_NZ,n", &__jrcc__JP_CC_NZ_n__, 0, 8 },
// 21: LD HL,nn
{ "LD HL,nn", &__ld__HL_nn__, 0, 12 },
// 22: LDI (HL),A
{ "LDI (HL),A", &__ldi___HL__A__, 0, 8 },
// 23: INC16 HL
{ "INC16 HL", &__inc16__HL__, 0, 8 },
// 24: INC H
{ "INC H", &__inc__H__, 0, 4 },
// 25: DEC H
{ "DEC H", &__dec__H__, 0, 4 },
// 26: LD H,n
{ "LD H,n", &__ld__H_n__, 0, 8 },
// 27: DAA -/-
{ "DAA -/-", &__daa__, 0, 4 },
// 28: JRCC JP_CC_Z,n
{ "JRCC JP_CC_Z,n", &__jrcc__JP_CC_Z_n__, 0, 8 },
// 29: ADDHL HL
{ "ADDHL HL", &__addhl__HL__, 0, 8 },
// 2A: LDI A,(HL)
{ "LDI A,(HL)", &__ldi__A__HL___, 0, 8 },
// 2B: DEC16 HL
{ "DEC16 HL", &__dec16__HL__, 0, 8 },
// 2C: INC L
{ "INC L", &__inc__L__, 0, 4 },
// 2D: DEC L
{ "DEC L", &__dec__L__, 0, 4 },
// 2E: LD L,n
{ "LD L,n", &__ld__L_n__, 0, 8 },
// 2F: CPL -/-
{ "CPL -/-", &__cpl__, 0, 4 },
// 30: JRCC JP_CC_NC,n
{ "JRCC JP_CC_NC,n", &__jrcc__JP_CC_NC_n__, 0, 8 },
// 31: LD SP,nn
{ "LD SP,nn", &__ld__SP_nn__, 0, 12 },
// 32: LDD (HL),A
{ "LDD (HL),A", &__ldd___HL__A__, 0, 8 },
// 33: INC16 SP
{ "INC16 SP", &__inc16__SP__, 0, 8 },
// 34: INC (HL)
{ "INC (HL)", &__inc___HL___, 0, 12 },
// 35: DEC (HL)
{ "DEC (HL)", &__dec___HL___, 0, 12 },
// 36: LD (HL),n
{ "LD (HL),n", &__ld___HL__n__, 0, 12 },
// 37: SCF -/-
{ "SCF -/-", &__scf__, 0, 4 },
// 38: JRCC JP_CC_C,n
{ "JRCC JP_CC_C,n", &__jrcc__JP_CC_C_n__, 0, 8 },
// 39: ADDHL SP
{ "ADDHL SP", &__addhl__SP__, 0, 8 },
// 3A: LDD A,(HL)
{ "LDD A,(HL)", &__ldd__A__HL___, 0, 8 },
// 3B: DEC16 SP
{ "DEC16 SP", &__dec16__SP__, 0, 8 },
// 3C: INC A
{ "INC A", &__inc__A__, 0, 4 },
// 3D: DEC A
{ "DEC A", &__dec__A__, 0, 4 },
// 3E: LD A,n
{ "LD A,n", &__ld__A_n__, 0, 8 },
// 3F: CCF -/-
{ "CCF -/-", &__ccf__, 0, 4 },
// 40: LD B,B
{ "LD B,B", &__ld__B_B__, 0, 4 },
// 41: LD B,C
{ "LD B,C", &__ld__B_C__, 0, 4 },
// 42: LD B,D
{ "LD B,D", &__ld__B_D__, 0, 4 },
// 43: LD B,E
{ "LD B,E", &__ld__B_E__, 0, 4 },
// 44: LD B,H
{ "LD B,H", &__ld__B_H__, 0, 4 },
// 45: LD B,L
{ "LD B,L", &__ld__B_L__, 0, 4 },
// 46: LD B,(HL)
{ "LD B,(HL)", &__ld__B__HL___, 0, 8 },
// 47: LD B,A
{ "LD B,A", &__ld__B_A__, 0, 4 },
// 48: LD C,B
{ "LD C,B", &__ld__C_B__, 0, 4 },
// 49: LD C,C
{ "LD C,C", &__ld__C_C__, 0, 4 },
// 4A: LD C,D
{ "LD C,D", &__ld__C_D__, 0, 4 },
// 4B: LD C,E
{ "LD C,E", &__ld__C_E__, 0, 4 },
// 4C: LD C,H
{ "LD C,H", &__ld__C_H__, 0, 4 },
// 4D: LD C,L
{ "LD C,L", &__ld__C_L__, 0, 4 },
// 4E: LD C,(HL)
{ "LD C,(HL)", &__ld__C__HL___, 0, 8 },
// 4F: LD C,A
{ "LD C,A", &__ld__C_A__, 0, 4 },
// 50: LD D,B
{ "LD D,B", &__ld__D_B__, 0, 4 },
// 51: LD D,C
{ "LD D,C", &__ld__D_C__, 0, 4 },
// 52: LD D,D
{ "LD D,D", &__ld__D_D__, 0, 4 },
// 53: LD D,E
{ "LD D,E", &__ld__D_E__, 0, 4 },
// 54: LD D,H
{ "LD D,H", &__ld__D_H__, 0, 4 },
// 55: LD D,L
{ "LD D,L", &__ld__D_L__, 0, 4 },
// 56: LD D,(HL)
{ "LD D,(HL)", &__ld__D__HL___, 0, 8 },
// 57: LD D,A
{ "LD D,A", &__ld__D_A__, 0, 4 },
// 58: LD E,B
{ "LD E,B", &__ld__E_B__, 0, 4 },
// 59: LD E,C
{ "LD E,C", &__ld__E_C__, 0, 4 },
// 5A: LD E,D
{ "LD E,D", &__ld__E_D__, 0, 4 },
// 5B: LD E,E
{ "LD E,E", &__ld__E_E__, 0, 4 },
// 5C: LD E,H
{ "LD E,H", &__ld__E_H__, 0, 4 },
// 5D: LD E,L
{ "LD E,L", &__ld__E_L__, 0, 4 },
// 5E: LD E,(HL)
{ "LD E,(HL)", &__ld__E__HL___, 0, 8 },
// 5F: LD E,A
{ "LD E,A", &__ld__E_A__, 0, 4 },
// 60: LD H,B
{ "LD H,B", &__ld__H_B__, 0, 4 },
// 61: LD H,C
{ "LD H,C", &__ld__H_C__, 0, 4 },
// 62: LD H,D
{ "LD H,D", &__ld__H_D__, 0, 4 },
// 63: LD H,E
{ "LD H,E", &__ld__H_E__, 0, 4 },
// 64: LD H,H
{ "LD H,H", &__ld__H_H__, 0, 4 },
// 65: LD H,L
{ "LD H,L", &__ld__H_L__, 0, 4 },
// 66: LD H,(HL)
{ "LD H,(HL)", &__ld__H__HL___, 0, 8 },
// 67: LD H,A
{ "LD H,A", &__ld__H_A__, 0, 4 },
// 68: LD L,B
{ "LD L,B", &__ld__L_B__, 0, 4 },
// 69: LD L,C
{ "LD L,C", &__ld__L_C__, 0, 4 },
// 6A: LD L,D
{ "LD L,D", &__ld__L_D__, 0, 4 },
// 6B: LD L,E
{ "LD L,E", &__ld__L_E__, 0, 4 },
// 6C: LD L,H
{ "LD L,H", &__ld__L_H__, 0, 4 },
// 6D: LD L,L
{ "LD L,L", &__ld__L_L__, 0, 4 },
// 6E: LD L,(HL)
{ "LD L,(HL)", &__ld__L__HL___, 0, 8 },
// 6F: LD L,A
{ "LD L,A", &__ld__L_A__, 0, 4 },
// 70: LD (HL),B
{ "LD (HL),B", &__ld___HL__B__, 0, 8 },
// 71: LD (HL),C
{ "LD (HL),C", &__ld___HL__C__, 0, 8 },
// 72: LD (HL),D
{ "LD (HL),D", &__ld___HL__D__, 0, 8 },
// 73: LD (HL),E
{ "LD (HL),E", &__ld___HL__E__, 0, 8 },
// 74: LD (HL),H
{ "LD (HL),H", &__ld___HL__H__, 0, 8 },
// 75: LD (HL),L
{ "LD (HL),L", &__ld___HL__L__, 0, 8 },
// 76: HALT -/-
{ "HALT -/-", &__halt__, 0, 4 },
// 77: LD (HL),A
{ "LD (HL),A", &__ld___HL__A__, 0, 8 },
// 78: LD A,B
{ "LD A,B", &__ld__A_B__, 0, 4 },
// 79: LD A,C
{ "LD A,C", &__ld__A_C__, 0, 4 },
// 7A: LD A,D
{ "LD A,D", &__ld__A_D__, 0, 4 },
// 7B: LD A,E
{ "LD A,E", &__ld__A_E__, 0, 4 },
// 7C: LD A,H
{ "LD A,H", &__ld__A_H__, 0, 4 },
// 7D: LD A,L
{ "LD A,L", &__ld__A_L__, 0, 4 },
// 7E: LD A,(HL)
{ "LD A,(HL)", &__ld__A__HL___, 0, 8 },
// 7F: LD A,A
{ "LD A,A", &__ld__A_A__, 0, 4 },
// 80: ADD B
{ "ADD B", &__add__B__, 0, 4 },
// 81: ADD C
{ "ADD C", &__add__C__, 0, 4 },
// 82: ADD D
{ "ADD D", &__add__D__, 0, 4 },
// 83: ADD E
{ "ADD E", &__add__E__, 0, 4 },
// 84: ADD H
{ "ADD H", &__add__H__, 0, 4 },
// 85: ADD L
{ "ADD L", &__add__L__, 0, 4 },
// 86: ADD (HL)
{ "ADD (HL)", &__add___HL___, 0, 8 },
// 87: ADD A
{ "ADD A", &__add__A__, 0, 4 },
// 88: ADC B
{ "ADC B", &__adc__B__, 0, 4 },
// 89: ADC C
{ "ADC C", &__adc__C__, 0, 4 },
// 8A: ADC D
{ "ADC D", &__adc__D__, 0, 4 },
// 8B: ADC E
{ "ADC E", &__adc__E__, 0, 4 },
// 8C: ADC H
{ "ADC H", &__adc__H__, 0, 4 },
// 8D: ADC L
{ "ADC L", &__adc__L__, 0, 4 },
// 8E: ADC (HL)
{ "ADC (HL)", &__adc___HL___, 0, 8 },
// 8F: ADC A
{ "ADC A", &__adc__A__, 0, 4 },
// 90: SUB B
{ "SUB B", &__sub__B__, 0, 4 },
// 91: SUB C
{ "SUB C", &__sub__C__, 0, 4 },
// 92: SUB D
{ "SUB D", &__sub__D__, 0, 4 },
// 93: SUB E
{ "SUB E", &__sub__E__, 0, 4 },
// 94: SUB H
{ "SUB H", &__sub__H__, 0, 4 },
// 95: SUB L
{ "SUB L", &__sub__L__, 0, 4 },
// 96: SUB (HL)
{ "SUB (HL)", &__sub___HL___, 0, 8 },
// 97: SUB A
{ "SUB A", &__sub__A__, 0, 4 },
// 98: SBC B
{ "SBC B", &__sbc__B__, 0, 4 },
// 99: SBC C
{ "SBC C", &__sbc__C__, 0, 4 },
// 9A: SBC D
{ "SBC D", &__sbc__D__, 0, 4 },
// 9B: SBC E
{ "SBC E", &__sbc__E__, 0, 4 },
// 9C: SBC H
{ "SBC H", &__sbc__H__, 0, 4 },
// 9D: SBC L
{ "SBC L", &__sbc__L__, 0, 4 },
// 9E: SBC (HL)
{ "SBC (HL)", &__sbc___HL___, 0, 8 },
// 9F: SBC A
{ "SBC A", &__sbc__A__, 0, 4 },
// A0: AND B
{ "AND B", &__and__B__, 0, 4 },
// A1: AND C
{ "AND C", &__and__C__, 0, 4 },
// A2: AND D
{ "AND D", &__and__D__, 0, 4 },
// A3: AND E
{ "AND E", &__and__E__, 0, 4 },
// A4: AND H
{ "AND H", &__and__H__, 0, 4 },
// A5: AND L
{ "AND L", &__and__L__, 0, 4 },
// A6: AND (HL)
{ "AND (HL)", &__and___HL___, 0, 8 },
// A7: AND A
{ "AND A", &__and__A__, 0, 4 },
// A8: XOR B
{ "XOR B", &__xor__B__, 0, 4 },
// A9: XOR C
{ "XOR C", &__xor__C__, 0, 4 },
// AA: XOR D
{ "XOR D", &__xor__D__, 0, 4 },
// AB: XOR E
{ "XOR E", &__xor__E__, 0, 4 },
// AC: XOR H
{ "XOR H", &__xor__H__, 0, 4 },
// AD: XOR L
{ "XOR L", &__xor__L__, 0, 4 },
// AE: XOR (HL)
{ "XOR (HL)", &__xor___HL___, 0, 8 },
// AF: XOR A
{ "XOR A", &__xor__A__, 0, 4 },
// B0: OR B
{ "OR B", &__or__B__, 0, 4 },
// B1: OR C
{ "OR C", &__or__C__, 0, 4 },
// B2: OR D
{ "OR D", &__or__D__, 0, 4 },
// B3: OR E
{ "OR E", &__or__E__, 0, 4 },
// B4: OR H
{ "OR H", &__or__H__, 0, 4 },
// B5: OR L
{ "OR L", &__or__L__, 0, 4 },
// B6: OR (HL)
{ "OR (HL)", &__or___HL___, 0, 8 },
// B7: OR A
{ "OR A", &__or__A__, 0, 4 },
// B8: CP B
{ "CP B", &__cp__B__, 0, 4 },
// B9: CP C
{ "CP C", &__cp__C__, 0, 4 },
// BA: CP D
{ "CP D", &__cp__D__, 0, 4 },
// BB: CP E
{ "CP E", &__cp__E__, 0, 4 },
// BC: CP H
{ "CP H", &__cp__H__, 0, 4 },
// BD: CP L
{ "CP L", &__cp__L__, 0, 4 },
// BE: CP (HL)
{ "CP (HL)", &__cp___HL___, 0, 8 },
// BF: CP A
{ "CP A", &__cp__A__, 0, 4 },
// C0: RETCC JP_CC_NZ
{ "RETCC JP_CC_NZ", &__retcc__JP_CC_NZ__, 0, 8 },
// C1: POP BC
{ "POP BC", &__pop__BC__, 0, 12 },
// C2: JPCC JP_CC_NZ,nn
{ "JPCC JP_CC_NZ,nn", &__jpcc__JP_CC_NZ_nn__, 0, 12 },
// C3: JP nn
{ "JP nn", &__jp__nn__, 0, 16 },
// C4: CALLCC JP_CC_NZ,nn
{ "CALLCC JP_CC_NZ,nn", &__callcc__JP_CC_NZ_nn__, 0, 12 },
// C5: PUSH BC
{ "PUSH BC", &__push__BC__, 0, 16 },
// C6: ADD n
{ "ADD n", &__add__n__, 0, 8 },
// C7: RST 0x00
{ "RST 0x00", &__rst__0x00__, 0, 16 },
// C8: RETCC JP_CC_Z
{ "RETCC JP_CC_Z", &__retcc__JP_CC_Z__, 0, 8 },
// C9: RET -/-
{ "RET -/-", &__ret__, 0, 16 },
// CA: JPCC JP_CC_Z,nn
{ "JPCC JP_CC_Z,nn", &__jpcc__JP_CC_Z_nn__, 0, 12 },
// CB: -- CBXX --
{ "-- CBXX --", &__cbxx__, 0, 8 },
// CC: CALLCC JP_CC_Z,nn
{ "CALLCC JP_CC_Z,nn", &__callcc__JP_CC_Z_nn__, 0, 12 },
// CD: CALL nn
{ "CALL nn", &__call__nn__, 0, 24 },
// CE: ADC n
{ "ADC n", &__adc__n__, 0, 8 },
// CF: RST 0x08
{ "RST 0x08", &__rst__0x08__, 0, 16 },
// D0: RETCC JP_CC_NC
{ "RETCC JP_CC_NC", &__retcc__JP_CC_NC__, 0, 8 },
// D1: POP DE
{ "POP DE", &__pop__DE__, 0, 12 },
// D2: JPCC JP_CC_NC,nn
{ "JPCC JP_CC_NC,nn", &__jpcc__JP_CC_NC_nn__, 0, 12 },
// D3: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// D4: CALLCC JP_CC_NC,nn
{ "CALLCC JP_CC_NC,nn", &__callcc__JP_CC_NC_nn__, 0, 12 },
// D5: PUSH DE
{ "PUSH DE", &__push__DE__, 0, 16 },
// D6: SUB n
{ "SUB n", &__sub__n__, 0, 8 },
// D7: RST 0x10
{ "RST 0x10", &__rst__0x10__, 0, 16 },
// D8: RETCC JP_CC_C
{ "RETCC JP_CC_C", &__retcc__JP_CC_C__, 0, 8 },
// D9: RETI -/-
{ "RETI -/-", &__reti__, 0, 16 },
// DA: JPCC JP_CC_C,nn
{ "JPCC JP_CC_C,nn", &__jpcc__JP_CC_C_nn__, 0, 12 },
// DB: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// DC: CALLCC JP_CC_C,nn
{ "CALLCC JP_CC_C,nn", &__callcc__JP_CC_C_nn__, 0, 12 },
// DD: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// DE: SBC n
{ "SBC n", &__sbc__n__, 0, 8 },
// DF: RST 0x18
{ "RST 0x18", &__rst__0x18__, 0, 16 },
// E0: LD (n),A
{ "LD (n),A", &__ld___n__A__, 0, 12 },
// E1: POP HL
{ "POP HL", &__pop__HL__, 0, 12 },
// E2: LD (C),A
{ "LD (C),A", &__ld___C__A__, 0, 8 },
// E3: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// E4: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// E5: PUSH HL
{ "PUSH HL", &__push__HL__, 0, 16 },
// E6: AND n
{ "AND n", &__and__n__, 0, 8 },
// E7: RST 0x20
{ "RST 0x20", &__rst__0x20__, 0, 16 },
// E8: ADDSP n
{ "ADDSP n", &__addsp__n__, 0, 16 },
// E9: JP HL
{ "JP HL", &__jp__HL__, 0, 4 },
// EA: LD (nn),A
{ "LD (nn),A", &__ld___nn__A__, 0, 16 },
// EB: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// EC: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// ED: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// EE: XOR n
{ "XOR n", &__xor__n__, 0, 8 },
// EF: RST 0x28
{ "RST 0x28", &__rst__0x28__, 0, 16 },
// F0: LD A,(n)
{ "LD A,(n)", &__ld__A__n___, 0, 12 },
// F1: POP AF
{ "POP AF", &__pop__AF__, 0, 12 },
// F2: LD A,(C)
{ "LD A,(C)", &__ld__A__C___, 0, 8 },
// F3: DI -/-
{ "DI -/-", &__di__, 0, 4 },
// F4: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// F5: PUSH AF
{ "PUSH AF", &__push__AF__, 0, 16 },
// F6: OR n
{ "OR n", &__or__n__, 0, 8 },
// F7: RST 0x30
{ "RST 0x30", &__rst__0x30__, 0, 16 },
// F8: LDHL n
{ "LDHL n", &__ldhl__n__, 0, 12 },
// F9: LD SP,HL
{ "LD SP,HL", &__ld__SP_HL__, 0, 8 },
// FA: LD A,(nn)
{ "LD A,(nn)", &__ld__A__nn___, 0, 16 },
// FB: EI -/-
{ "EI -/-", &__ei__, 0, 4 },
// FC: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// FD: INVALID
{ "INVALID", &invalid_op, 0, 0 },
// FE: CP n
{ "CP n", &__cp__n__, 0, 8 },
// FF: RST 0x38
{ "RST 0x38", &__rst__0x38__, 0, 16 },
};
#endif
